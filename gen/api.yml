openapi: 3.0.3
info:
  title: Packlister API
  description: |-
    Packlister server API specification in OpenAPI 3.0 format. Used within this project for autogenerating
    Java Spring controllers code for the API level implementation..
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: packlists
    description: Operations for handling packlists
  - name: items
    description: Operations for handling user items. Packlist items (user items referred within the packlist) are handled within packlist operations.
  - name: auth
    description: User registration and login
paths:
  /items:
    get:
      tags:
        - items
      summary: Get authenticated user's user items.
      description: Get authenticated user's user items.
      operationId: getItems
      responses:
        '200':
          $ref: '#/components/responses/UserItemsResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /items/batch:
    put:
      tags:
        - items
      summary: Update or create multiple user items
      description: Update or create multiple user items
      operationId: upsertItems
      requestBody:
        $ref: '#/components/requestBodies/UserItemsRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UserItemsResponse'
        default:
          $ref: '#/components/responses/UserItemsResponse'
  /items/batchDelete:
    post:
      tags:
        - items
      summary: Delete multiple user items
      description: Delete multiple user items. Failed requests do not delete any of the items.
      operationId: deleteItems
      requestBody:
        $ref: '#/components/requestBodies/UserItemIdsRequestBody'
      responses:
        '200':
          description: All items deleted successfully or they did not exist.
        default:
          $ref: '#/components/responses/ErrorResponse'
  /packlists:
    get:
      tags: [packlists]
      summary: Get all the user's packlists
      description: Response has only limited view on data of packlists.
      operationId: getAllPacklists
      responses:
        '200':
          $ref: '#/components/responses/PacklistsLimitedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /packlists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Packlist UUID
        schema:
          $ref: '#/components/schemas/UUID'
    get:
      tags: [packlists]
      summary: Get single packlist
      description: Get the entire packlist content.
      operationId: getPacklist
      responses:
        '200':
          $ref: '#/components/responses/PacklistResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [packlists]
      summary: Create a single packlist
      description: Create a single packlist
      operationId: createPacklist
      requestBody:
        $ref: '#/components/requestBodies/PacklistRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/PacklistResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags: [packlists]
      summary: Update a single packlist
      description: Update a single packlist
      operationId: updatePacklist
      requestBody:
        $ref: '#/components/requestBodies/PacklistRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/PacklistResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /auth/register:
    post:
      tags:
        - auth
      summary: Register user
      description: Register user
      operationId: register
      requestBody:
        description: User registration object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    UUID:
      type: string
      description: UUID identifier
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    Username:
      type: string
      description: User identifier
      example: foo
    Email:
      type: string
      description: User email
      format: email
      example: johnny@mail.com
    Password:
      type: string
      description: User password
      example: Hunter2
    UserItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: Name of item
          example: Arc'teryx Gamma LT Hoody jacket
        description:
          type: string
          description: A longer description of item
          example: Softshell jacket. Two hand pockets, one pocket on inside.
        weight:
          type: integer
          description: Weight of item in grams. Any conversion or localization must be handled elsewhere.
          example: 320
        publicVisibility:
          type: boolean
          description: Controls if the item is visible to other users. Publicly visible items can be found with item search.
          example: true
    UserItemArray:
      type: array
      items:
        $ref: '#/components/schemas/UserItem'
    Packlist:
      type: object
      description: Top level model for a items grouped together.
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: Name of packlist
          example: Halti hike
        description:
          type: string
          description: Description of packlist
          example: Made the trip on September 2021. Does not contain extra stuff stored in the car.
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PacklistLimitedView:
      type: object
      description: Limited view of a packlist containing only id and name.
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: Name of packlist
          example: Halti hike
    Category:
      type: object
      description: Nested model grouping items, for example of certain purpose, together.
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: Name of category
          example: Sleeping equipment
        items:
          type: array
          items:
            $ref: '#/components/schemas/CategoryItem'
    CategoryItem:
      type: object
      description: Links an user item to the packlist/category. Only has quantity as independent data.
      properties:
        userItemId:
          $ref: '#/components/schemas/UUID'
        quantity:
          type: integer
          description: Quantity of items of this type. For example multiple packages of some food.
          example: 5
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
      required:
        - id
        - username
        - email
    UserRegistration:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
      required:
        - username
        - email
        - password
    APIError:
      type: object
      properties:
        message:
          type: string
    APIErrorArray:
      type: array
      items:
        $ref: '#/components/schemas/APIError'
    ErrorWrapper:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/APIErrorArray'
    UserItemsResponse:
      type: object
      properties:
        userItems:
          $ref: '#/components/schemas/UserItemArray'
        errors:
          $ref: '#/components/schemas/APIErrorArray'
  requestBodies:
    UserItemsRequestBody:
      description: Object containing a list of user items.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userItems:
                $ref: '#/components/schemas/UserItemArray'
    UserItemIdsRequestBody:
      description: Object containing a list of user item ids.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userItemIds:
                type: array
                items:
                  $ref: '#/components/schemas/UUID'
    PacklistRequestBody:
      description: The packlist object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Packlist'
  responses:
    UserItemsResponse:
      description: Object containing list of user items for successful operation, or possible errors for failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserItemsResponse'
    UserItemsBatchDeleteResponse:
      description: Successful case all items deleted successfully or they did not exist. Contains errors only if operation failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
    PacklistsLimitedResponse:
      description: Object containing a list of packlists with a limited view.
      content:
        application/json:
          schema:
            type: object
            properties:
              packlists:
                type: array
                items:
                  $ref: '#/components/schemas/PacklistLimitedView'
    PacklistResponse:
      description: Single packlist response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Packlist'
    ErrorResponse:
      description: Generic error response containing an array of errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
